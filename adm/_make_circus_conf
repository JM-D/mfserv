#!/usr/bin/env python3

import os
import glob
import envtpl
from configparser_extended import ExtendedConfigParser

MFSERV_PLUGINS_HOME = os.path.join(os.environ["MODULE_RUNTIME_HOME"],
                                   "var", "plugins")
LOG_LEVEL = os.environ.get('MFSERV_LOG_DEFAULT_LEVEL', 'INFO')
CONFIG = os.environ.get('MFCONFIG', 'GENERIC')

'''
Below are defined process types depending on the code language
'''

# Available types for watching python (i.e gunicorn)
PYTHON_TYP_LIST = [
    "gunicorn3_sync",
    "gunicorn2_sync",
    "gunicorn3_asyncio"
]

# Available types for watching js (i.e node)
JS_TYP_LIST = [
    "node"
]

# All types
ALL_TYP_LIST = \
    PYTHON_TYP_LIST + \
    JS_TYP_LIST


def make_watcher_conf(plugin_configuration_file):
    output = []
    parser = ExtendedConfigParser(config=CONFIG, strict=False,
                                  inheritance='im', interpolation=None)
    plugin_name = os.path.basename(os.path.dirname(plugin_configuration_file))
    plugin_dir = os.path.dirname(plugin_configuration_file)
    parser.read(plugin_configuration_file)
    apps = [x.replace("app_", "", 1).split(':')[0] for x in parser.sections()
            if x.startswith("app_")]
    os.environ["MFSERV_CURRENT_PLUGIN_DIR"] = \
        "%s/%s" % (MFSERV_PLUGINS_HOME, plugin_name)

    # gunicorn_log_level
    gunicorn_log_level = LOG_LEVEL.lower()
    if gunicorn_log_level not in ('debug', 'info', 'warning', 'error',
                                  'critical'):
        gunicorn_log_level = "debug"

    # others like node
    node_log_level = gunicorn_log_level

    for app in apps:
        section = "app_%s" % app
        typ = parser.get(section, "type")
        if typ not in ALL_TYP_LIST:
            continue

        if typ in PYTHON_TYP_LIST:
            gunicorn_arg = parser.get(section, "gunicorn_arg")

            add_plugin_dir_to_python_path = True
            if parser.has_option(section, "add_plugin_dir_to_python_path"):
                add_plugin_dir_to_python_path = \
                    parser.getboolean(section, "add_plugin_dir_to_python_path")

            add_app_dir_to_python_path = False
            if parser.has_option(section, "add_app_dir_to_python_path"):
                add_app_dir_to_python_path = \
                    parser.getboolean(section, "add_app_dir_to_python_path")

        elif typ in JS_TYP_LIST:
            node_arg = parser.get(section, "node_arg")

            add_plugin_dir_to_node_path = True
            if parser.has_option(section, "add_plugin_dir_to_node_path"):
                add_plugin_dir_to_node_path = \
                    parser.getboolean(section, "add_plugin_dir_to_node_path")

            add_app_dir_to_node_path = False
            if parser.has_option(section, "add_app_dir_to_node_path"):
                add_app_dir_to_node_path = \
                    parser.getboolean(section, "add_app_dir_to_node_path")

        workers = parser.get(section, "workers")

        rlimit_as = None
        rlimit_nofile = None
        rlimit_nproc = None
        rlimit_stack = None
        rlimit_core = None
        rlimit_fsize = None

        if parser.has_option(section, "rlimit_as"):
            rlimit_as = parser.getint(section, "rlimit_as")
        if parser.has_option(section, "rlimit_nofile"):
            rlimit_nofile = parser.getint(section, "rlimit_nofile")
        if parser.has_option(section, "rlimit_nproc"):
            rlimit_nproc = parser.getint(section, "rlimit_nproc")
        if parser.has_option(section, "rlimit_stack"):
            rlimit_stack = parser.getint(section, "rlimit_stack")
        if parser.has_option(section, "rlimit_core"):
            rlimit_core = parser.getint(section, "rlimit_core")
        if parser.has_option(section, "rlimit_fsize"):
            rlimit_fsize = parser.getint(section, "rlimit_fsize")

        output.append("")
        output.append("[watcher:app.%s.%s]" % (plugin_name, app))
        output.append("cmd = layer_wrapper")

        if typ in PYTHON_TYP_LIST:
            bind = "unix:{{MODULE_RUNTIME_HOME}}/var/" \
                "gunicorn_app_%s_%s.socket" % (plugin_name, app)

            if typ == "gunicorn3_asyncio":
                worker_class = "aiohttp.worker.GunicornWebWorker"
            else:
                worker_class = "sync"
            layer_wrapper_extra_args = " --layers=plugin_%s@mfserv" % \
                plugin_name
            if add_plugin_dir_to_python_path:
                layer_wrapper_extra_args = layer_wrapper_extra_args + \
                    " --prepend-env=PYTHONPATH,%s" % plugin_dir
            app_dir = os.path.join(plugin_dir, app)
            if add_app_dir_to_python_path:
                layer_wrapper_extra_args = layer_wrapper_extra_args + \
                    " --prepend-env=PYTHONPATH,%s " % app_dir
            layer_wrapper_extra_args = layer_wrapper_extra_args + \
                " --extra-env-prefix=MFSERV_CURRENT_PLUGIN"
            output.append("args = %s -- "
                          "gunicorn --workers=%s "
                          "--bind=%s --worker-class=%s --log-level=%s %s" %
                          (layer_wrapper_extra_args, workers,
                           bind, worker_class, gunicorn_log_level,
                           gunicorn_arg))

        elif typ in JS_TYP_LIST:
            bind = "unix:{{MODULE_RUNTIME_HOME}}/var/node_app_%s_%s.socket" % \
                (plugin_name, app)

            layer_wrapper_extra_args = " --layers=plugin_%s@mfserv" % \
                plugin_name
            if add_plugin_dir_to_node_path:
                layer_wrapper_extra_args = layer_wrapper_extra_args + \
                    " --prepend-env=NODE_PATH,%s" % plugin_dir
            app_dir = os.path.join(plugin_dir, app)
            if add_app_dir_to_node_path:
                layer_wrapper_extra_args = layer_wrapper_extra_args + \
                    " --prepend-env=NODE_PATH,%s " % app_dir
            layer_wrapper_extra_args = layer_wrapper_extra_args + \
                " --extra-env-prefix=MFSERV_CURRENT_PLUGIN"

            node_server = "%s/%s/%s" % (plugin_dir, app, node_arg)

            output.append("args = %s -- "
                          "node %s --workers=%s "
                          "--bind=%s --loglevel=%s" %
                          (layer_wrapper_extra_args, node_server, workers,
                           bind, node_log_level))

        workdir = os.path.join(MFSERV_PLUGINS_HOME, plugin_name)
        output.append("working_dir = %s" % workdir)
        output.append("numprocesses = 1")
        output.append("copy_env = True")
        output.append("async_kill = True")
        output.append("autostart = True")
        output.append("respawn = True")
        if rlimit_as:
            output.append("rlimit_as = %i" % rlimit_as)
        if rlimit_nofile:
            output.append("rlimit_nofile = %i" % rlimit_nofile)
        if rlimit_nproc:
            output.append("rlimit_nproc = %i" % rlimit_nproc)
        if rlimit_stack:
            output.append("rlimit_stack = %i" % rlimit_stack)
        if rlimit_core:
            output.append("rlimit_core = %i" % rlimit_core)
        if rlimit_fsize:
            output.append("rlimit_fsize = %i" % rlimit_fsize)
        output.append("stdout_stream.class = FileStream")
        output.append("stderr_stream.class = FileStream")
        output.append("stdout_stream.filename = "
                      "{{MODULE_RUNTIME_HOME}}/log/"
                      "app_%s_%s.stdout" % (plugin_name, app))
        output.append("stderr_stream.filename = "
                      "{{MODULE_RUNTIME_HOME}}/log/"
                      "app_%s_%s.stderr" % (plugin_name, app))
    return envtpl.render_string("\n".join(output))


circus_ini_file = os.path.join(os.environ['MODULE_HOME'], 'config',
                               'circus.ini')
with open(circus_ini_file, "r") as f:
    content = envtpl.render_string(f.read())

for config_file in glob.glob(MFSERV_PLUGINS_HOME + "/*/config.ini"):
    content = content + make_watcher_conf(config_file)

print(content)
